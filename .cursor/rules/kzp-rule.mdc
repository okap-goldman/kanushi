---
description: 
globs: 
alwaysApply: true
---
# TypeScriptプロジェクト開発ガイド

## 1. コーディング規約 (優先度: 高)
- コードの先頭には、そのファイルの責務を50文字以内で記載
- 関数には必ずJSDoc（コメント、@param、@returns）を記述
- 変数・関数名は明確で目的を表す英語名を使用
- 厳格な型付け（`any`は避ける、Union型の活用）

## 2. コード品質 (優先度: 高)
- 関数は単一責任の原則に従う
- 関数本体のロジックは10行以内にする
- ネストは浅く保つ（3レベル以内）
- 副作用を最小限に抑える（純粋関数を優先）
- マジックナンバーは使用しない（定数として定義）
- ファイルサイズは500行以内に制限（超える場合は分割）
- 関数宣言は必ずアロー関数を使用
- 可能な限りes-toolkitを用いて実装

## 3. モジュール設計 (優先度: 大)
- 適切なモジュール分割
- インポートは整理し、未使用のものは削除
- 設定とロジックを分離

## 4. 開発ワークフロー (優先度: 高)
- サーバー起動は必ず `npm run dev` で行う (http://localhost:4488)
- ログ閲覧は必ず `npm run log` で行う
- 機能実装・バグ修正後は必ずplaywrightのMCPでブラウザでの動作確認を実施

## 5. JSDoc記述例 (優先度: 中)
```typescript
/**
 * 挨拶を表示するコンポーネント
 * @param {object} props - コンポーネントのプロパティ
 * @param {string} props.name - 挨拶する相手の名前（デフォルト: "Guest"）
 * @returns {JSX.Element} 挨拶メッセージを表示する要素
 */
```

## 6. パフォーマンス最適化 (優先度: 中)
- 配列処理は高速なメソッド（map、filterなど）を使用
- 遅延ロード（Lazy Loading）の活用
- DOM操作は最小限に抑える

## 7. 安全なコーディング (優先度: 中)
- 外部データは検証してから使用
- エラー処理は適切に行い、例外をキャッチ
- エラーはError型でスロー

## 8. テスト (優先度: 低)
- 新機能には必ずテストを書く
- テストはシンプルで理解しやすく

# 重要な注意点
- 常に日本語で回答
- 理解できない指示があれば質問する